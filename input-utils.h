#ifndef _INPUT_UTILS_H_
# define _INPUT_UTILS_H_

/* Debug/Log helpers for inputs. */
#define ARRAY_LEN(arr) (sizeof (arr) / sizeof ((arr)[0]))
#define __ceil(n, c) (((n) + (c) - 1) / (c))
#define __bitset_len(n, type) (__ceil((n), sizeof (type) * 8))
#define __test_bit(bit, arr) \
        ((arr)[(bit) / (sizeof ((arr)[0]) * 8)] & (1 << ((bit) % (sizeof ((arr)[0]) * 8))))
struct type_name {
    int type;
    char *name;
};
/* Generic function /res/_str generator. */
#define type_name_fn(res) \
    static inline const char *res##_str(int type) {     \
        unsigned int i;                                 \
        for (i = 0; i < ARRAY_LEN(res##_names); ++i) { \
            if (res##_names[i].type == type)            \
                return res##_names[i].name;             \
        }                                               \
        return "Unknown";                               \
    }
static struct type_name bus_type_names[] = {
    { BUS_PCI, "pci" },
    { BUS_ISAPNP, "isapnp" },
    { BUS_USB, "usb" },
    { BUS_HIL, "hil" },
    { BUS_BLUETOOTH, "bluetooth" },
    { BUS_VIRTUAL, "virtual" },
    { BUS_ISA, "isa" },
    { BUS_I8042, "i8042" },
    { BUS_XTKBD, "xtkbd" },
    { BUS_RS232, "rs232" },
    { BUS_GAMEPORT, "gameport" },
    { BUS_PARPORT, "parport" },
    { BUS_AMIGA, "amiga" },
    { BUS_ADB, "adb" },
    { BUS_I2C, "i2c" },
    { BUS_HOST, "host" },
    { BUS_GSC, "gsc" },
    { BUS_ATARI, "atari" },
    { BUS_SPI, "spi" },
    { BUS_RMI, "rmi" },
    { BUS_CEC, "cec" },
};
type_name_fn(bus_type);

static struct type_name ev_type_names[] = {
    { EV_SYN, "syn" },
    { EV_KEY, "key" },
    { EV_REL, "rel" },
    { EV_ABS, "abs" },
    { EV_MSC, "msc" },
    { EV_SW, "sw" },
    { EV_LED, "led" },
    { EV_SND, "snd" },
    { EV_REP, "rep" },
    { EV_FF, "ff" },
    { EV_PWR, "pwr" },
    { EV_FF_STATUS, "ff_status" },
};
type_name_fn(ev_type);

static struct type_name syn_type_names[] = {
    { SYN_REPORT, "report" },
    { SYN_CONFIG, "config" },
    { SYN_MT_REPORT, "report" },
    { SYN_DROPPED, "dropped" },
};
type_name_fn(syn_type);

static struct type_name abs_type_names[] = {
    { ABS_X, "x" },
    { ABS_Y, "y" },
    { ABS_Z, "z" },
    { ABS_RX, "rx" },
    { ABS_RY, "ry" },
    { ABS_RZ, "rz" },
    { ABS_THROTTLE, "throttle" },
    { ABS_RUDDER, "rudder" },
    { ABS_WHEEL, "wheel" },
    { ABS_GAS, "gas" },
    { ABS_BRAKE, "brake" },
    { ABS_HAT0X, "hat0x" },
    { ABS_HAT0Y, "hat0y" },
    { ABS_HAT1X, "hat1x" },
    { ABS_HAT1Y, "hat1y" },
    { ABS_HAT2X, "hat2x" },
    { ABS_HAT2Y, "hat2y" },
    { ABS_HAT3X, "hat3x" },
    { ABS_HAT3Y, "hat3y" },
    { ABS_PRESSURE, "pressure" },
    { ABS_DISTANCE, "distance" },
    { ABS_TILT_X, "tilt_x" },
    { ABS_TILT_Y, "tilt_y" },
    { ABS_TOOL_WIDTH, "tool_width" },
    { ABS_VOLUME, "volume" },
    { ABS_MISC, "misc" },
    { ABS_MT_SLOT, "mt_slot" },
    { ABS_MT_TOUCH_MAJOR, "mt_touch_major" },
    { ABS_MT_TOUCH_MINOR, "mt_touch_minor" },
    { ABS_MT_WIDTH_MAJOR, "mt_width_major" },
    { ABS_MT_WIDTH_MINOR, "mt_width_minor" },
    { ABS_MT_ORIENTATION, "mt_orientation" },
    { ABS_MT_POSITION_X, "mt_position_x" },
    { ABS_MT_POSITION_Y, "mt_position_y" },
    { ABS_MT_TOOL_TYPE, "mt_tool_type" },
    { ABS_MT_BLOB_ID, "mt_blob_id" },
    { ABS_MT_TRACKING_ID, "mt_tracking_id" },
    { ABS_MT_PRESSURE, "mt_pressure" },
    { ABS_MT_DISTANCE, "mt_distance" },
    { ABS_MT_TOOL_X, "mt_tool_x" },
    { ABS_MT_TOOL_Y, "mt_tool_y" },
};
type_name_fn(abs_type);

static struct type_name key_type_names[] = {
    { KEY_RESERVED, "reserved" },
    { KEY_ESC, "esc" },
    { KEY_1, "1" },
    { KEY_2, "2" },
    { KEY_3, "3" },
    { KEY_4, "4" },
    { KEY_5, "5" },
    { KEY_6, "6" },
    { KEY_7, "7" },
    { KEY_8, "8" },
    { KEY_9, "9" },
    { KEY_0, "0" },
    { KEY_MINUS, "minus" },
    { KEY_EQUAL, "equal" },
    { KEY_BACKSPACE, "backspace" },
    { KEY_TAB, "tab" },
    { KEY_Q, "q" },
    { KEY_W, "w" },
    { KEY_E, "e" },
    { KEY_R, "r" },
    { KEY_T, "t" },
    { KEY_Y, "y" },
    { KEY_U, "u" },
    { KEY_I, "i" },
    { KEY_O, "o" },
    { KEY_P, "p" },
    { KEY_LEFTBRACE, "leftbrace" },
    { KEY_RIGHTBRACE, "rightbrace" },
    { KEY_ENTER, "enter" },
    { KEY_LEFTCTRL, "leftctrl" },
    { KEY_A, "a" },
    { KEY_S, "s" },
    { KEY_D, "d" },
    { KEY_F, "f" },
    { KEY_G, "g" },
    { KEY_H, "h" },
    { KEY_J, "j" },
    { KEY_K, "k" },
    { KEY_L, "l" },
    { KEY_SEMICOLON, "semicolon" },
    { KEY_APOSTROPHE, "apostrophe" },
    { KEY_GRAVE, "grave" },
    { KEY_LEFTSHIFT, "leftshift" },
    { KEY_BACKSLASH, "backslash" },
    { KEY_Z, "z" },
    { KEY_X, "x" },
    { KEY_C, "c" },
    { KEY_V, "v" },
    { KEY_B, "b" },
    { KEY_N, "n" },
    { KEY_M, "m" },
    { KEY_COMMA, "comma" },
    { KEY_DOT, "dot" },
    { KEY_SLASH, "slash" },
    { KEY_RIGHTSHIFT, "rightshift" },
    { KEY_KPASTERISK, "kpasterisk" },
    { KEY_LEFTALT, "leftalt" },
    { KEY_SPACE, "space" },
    { KEY_CAPSLOCK, "capslock" },
    { KEY_F1, "f1" },
    { KEY_F2, "f2" },
    { KEY_F3, "f3" },
    { KEY_F4, "f4" },
    { KEY_F5, "f5" },
    { KEY_F6, "f6" },
    { KEY_F7, "f7" },
    { KEY_F8, "f8" },
    { KEY_F9, "f9" },
    { KEY_F10, "f10" },
    { KEY_NUMLOCK, "numlock" },
    { KEY_SCROLLLOCK, "scrolllock" },
    { KEY_KP7, "kp7" },
    { KEY_KP8, "kp8" },
    { KEY_KP9, "kp9" },
    { KEY_KPMINUS, "kpminus" },
    { KEY_KP4, "kp4" },
    { KEY_KP5, "kp5" },
    { KEY_KP6, "kp6" },
    { KEY_KPPLUS, "kpplus" },
    { KEY_KP1, "kp1" },
    { KEY_KP2, "kp2" },
    { KEY_KP3, "kp3" },
    { KEY_KP0, "kp0" },
    { KEY_KPDOT, "kpdot" },
    { KEY_ZENKAKUHANKAKU, "zenkakuhankaku" },
    { KEY_102ND, "102nd" },
    { KEY_F11, "f11" },
    { KEY_F12, "f12" },
    { KEY_RO, "ro" },
    { KEY_KATAKANA, "katakana" },
    { KEY_HIRAGANA, "hiragana" },
    { KEY_HENKAN, "henkan" },
    { KEY_KATAKANAHIRAGANA, "katakanahiragana" },
    { KEY_MUHENKAN, "muhenkan" },
    { KEY_KPJPCOMMA, "kpjpcomma" },
    { KEY_KPENTER, "kpenter" },
    { KEY_RIGHTCTRL, "rightctrl" },
    { KEY_KPSLASH, "kpslash" },
    { KEY_SYSRQ, "sysrq" },
    { KEY_RIGHTALT, "rightalt" },
    { KEY_LINEFEED, "linefeed" },
    { KEY_HOME, "home" },
    { KEY_UP, "up" },
    { KEY_PAGEUP, "pageup" },
    { KEY_LEFT, "left" },
    { KEY_RIGHT, "right" },
    { KEY_END, "end" },
    { KEY_DOWN, "down" },
    { KEY_PAGEDOWN, "pagedown" },
    { KEY_INSERT, "insert" },
    { KEY_DELETE, "delete" },
    { KEY_MACRO, "macro" },
    { KEY_MUTE, "mute" },
    { BTN_0, "btn_0" },
    { BTN_1, "btn_1" },
    { BTN_2, "btn_2" },
    { BTN_3, "btn_3" },
    { BTN_4, "btn_4" },
    { BTN_5, "btn_5" },
    { BTN_6, "btn_6" },
    { BTN_7, "btn_7" },
    { BTN_8, "btn_8" },
    { BTN_9, "btn_9" },
    { BTN_LEFT, "btn_left" },
    { BTN_RIGHT, "btn_right" },
    { BTN_MIDDLE, "btn_middle" },
    { BTN_SIDE, "btn_side" },
    { BTN_EXTRA, "btn_extra" },
    { BTN_FORWARD, "btn_forward" },
    { BTN_BACK, "btn_back" },
    { BTN_TASK, "btn_task" },
    { BTN_TOOL_PEN, "btn_tool_pen" },
    { BTN_TOOL_RUBBER, "btn_tool_rubber" },
    { BTN_TOOL_BRUSH, "btn_tool_brush" },
    { BTN_TOOL_PENCIL, "btn_tool_pencil" },
    { BTN_TOOL_AIRBRUSH, "btn_tool_airbrush" },
    { BTN_TOOL_FINGER, "btn_tool_finger" },
    { BTN_TOOL_MOUSE, "btn_tool_mouse" },
    { BTN_TOOL_LENS, "btn_tool_lens" },
    { BTN_TOOL_QUINTTAP, "btn_tool_quinttap" },
    { BTN_TOUCH, "btn_touch" },
    { BTN_STYLUS, "btn_stylus" },
    { BTN_STYLUS2, "btn_stylus2" },
    { BTN_TOOL_DOUBLETAP, "btn_tool_doubletap" },
    { BTN_TOOL_TRIPLETAP, "btn_tool_tripletap" },
    { BTN_TOOL_QUADTAP, "btn_tool_quadtap" },
    { BTN_GEAR_DOWN, "btn_gear_down" },
    { BTN_GEAR_UP, "btn_gear_up" },
};
type_name_fn(key_type);

void print_input_events(int fd);
void print_input_axes(int fd);
void print_input_keys(int fd);
void print_input_keys_interesting(int fd);
void print_bt(void);

#endif /* !_INPUT_UTILS_H_ */
